'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const debug = require('debug')('thor:injector');
const web3Utils = require('web3-utils');
const utils = require("../utils");
const extendFormatters = function (web3) {
    const outputTransactionFormatter = web3.extend.formatters.outputTransactionFormatter;
    web3.extend.formatters.outputTransactionFormatter = function (tx) {
        if (tx && tx.isThorified) {
            debug('outputTransactionFormatter');
            tx.chainTag = web3Utils.numberToHex(tx.chainTag);
            if (tx.clauses) {
                for (const clause of tx.clauses) {
                    clause.value = web3.extend.formatters.outputBigNumberFormatter(clause.value);
                }
            }
            return tx;
        }
        else {
            return outputTransactionFormatter(tx);
        }
    };
    const outputTransactionReceiptFormatter = web3.extend.formatters.outputTransactionReceiptFormatter;
    web3.extend.formatters.outputTransactionReceiptFormatter = function (receipt) {
        if (receipt && receipt.isThorified) {
            debug('outputTransactionReceiptFormatter');
            if (receipt.hasOwnProperty('transactionIndex')) {
                delete receipt.transactionIndex;
            }
            if (receipt.hasOwnProperty('cumulativeGasUsed')) {
                delete receipt.cumulativeGasUsed;
            }
            receipt.gasUsed = web3Utils.hexToNumber(receipt.gasUsed);
            for (const output of receipt.outputs) {
                if (web3Utils._.isArray(output.events)) {
                    output.events = output.events.map((event) => {
                        if (!event.isThorified) {
                            Object.defineProperty(event, 'isThorified', { get: () => true });
                        }
                        return web3.extend.formatters.outputLogFormatter(event);
                    });
                }
            }
            return receipt;
        }
        else {
            return outputTransactionReceiptFormatter(receipt);
        }
    };
    const outputLogFormatter = web3.extend.formatters.outputLogFormatter;
    web3.extend.formatters.outputLogFormatter = function (log) {
        if (log && log.isThorified) {
            debug('outputLogFormatter');
            if (log.hasOwnProperty('transactionIndex')) {
                delete log.transactionIndex;
            }
            if (log.hasOwnProperty('logIndex')) {
                delete log.logIndex;
            }
            if (log.hasOwnProperty('id')) {
                delete log.id;
            }
            return log;
        }
        else {
            return outputLogFormatter(log);
        }
    };
};
exports.extendFormatters = extendFormatters;
const inputLogFilterFormatter = function (options) {
    if (options) {
        const logFilterOptions = {};
        if (options.address) {
            logFilterOptions.address = utils.validAddressOrError(options.address);
        }
        if (options.pos) {
            logFilterOptions.pos = utils.validBytes32OrError(options.pos, 'Invalid position(block ID)');
        }
        if (options.t0) {
            logFilterOptions.t0 = utils.validBytes32OrError(options.t0, 'Invalid t0');
        }
        if (options.t1) {
            logFilterOptions.t1 = utils.validBytes32OrError(options.t1, 'Invalid t1');
        }
        if (options.t2) {
            logFilterOptions.t2 = utils.validBytes32OrError(options.t2, 'Invalid t2');
        }
        if (options.t3) {
            logFilterOptions.t3 = utils.validBytes32OrError(options.t3, 'Invalid t3');
        }
        if (options.t4) {
            logFilterOptions.t4 = utils.validBytes32OrError(options.t4, 'Invalid t4');
        }
        return logFilterOptions;
    }
};
exports.inputLogFilterFormatter = inputLogFilterFormatter;
const inputBlockFilterFormatter = function (blockID) {
    if (blockID) {
        blockID = utils.validBytes32OrError(blockID, 'Invalid position(block ID)');
        return blockID;
    }
};
exports.inputBlockFilterFormatter = inputBlockFilterFormatter;
const inputTransferFilterFormatter = function (options) {
    if (options) {
        const transferFilterOptions = {};
        if (options.pos) {
            transferFilterOptions.pos = utils.validBytes32OrError(options.pos, 'Invalid position(block ID)');
        }
        if (options.txOrigin) {
            transferFilterOptions.txOrigin = utils.validAddressOrError(options.txOrigin);
        }
        if (options.sender) {
            transferFilterOptions.sender = utils.validAddressOrError(options.sender);
        }
        if (options.recipient) {
            transferFilterOptions.recipient = utils.validAddressOrError(options.recipient);
        }
        return transferFilterOptions;
    }
};
exports.inputTransferFilterFormatter = inputTransferFilterFormatter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0dGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHRlbmQvZm9ybWF0dGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUE7O0FBQ1osTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0FBQy9DLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQTtBQUV2QyxrQ0FBaUM7QUFFakMsTUFBTSxnQkFBZ0IsR0FBRyxVQUFTLElBQVM7SUFFdkMsTUFBTSwwQkFBMEIsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQywwQkFBMEIsQ0FBQTtJQUNwRixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQywwQkFBMEIsR0FBRyxVQUFTLEVBQU87UUFDaEUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTtZQUN0QixLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtZQUNuQyxFQUFFLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBRWhELElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRTtnQkFDWixLQUFLLE1BQU0sTUFBTSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUU7b0JBQzdCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsd0JBQXdCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO2lCQUMvRTthQUNKO1lBQ0QsT0FBTyxFQUFFLENBQUE7U0FDWjthQUFNO1lBQ0gsT0FBTywwQkFBMEIsQ0FBQyxFQUFFLENBQUMsQ0FBQTtTQUN4QztJQUNMLENBQUMsQ0FBQTtJQUVELE1BQU0saUNBQWlDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsaUNBQWlDLENBQUE7SUFDbEcsSUFB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