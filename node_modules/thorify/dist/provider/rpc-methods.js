'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils = require("../utils");
const simple_http_1 = require("./simple-http");
exports.RPCMethodMap = new Map();
const HTTPPostProcessor = function (res) {
    if (res.Code === 0) {
        return Promise.reject(new Error(`[thor-provider] Invalid response, check the host`));
    }
    if (res.Code !== 200) {
        return Promise.reject(new Error(res.Body ? res.Body : ('[thor-provider] Invalid response code from provider: ' + res.Code)));
    }
    return Promise.resolve(res.Body);
};
exports.RPCMethodMap.set('eth_getBlockByNumber', function (rpc, host, timeout) {
    return __awaiter(this, void 0, void 0, function* () {
        const URL = host + '/blocks/' + utils.fromETHBlockNumber(rpc.params[0]);
        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);
        return rpc.makeResult(res);
    });
});
exports.RPCMethodMap.set('eth_getBlockByHash', function (rpc, host, timeout) {
    return __awaiter(this, void 0, void 0, function* () {
        const URL = host + '/blocks/' + rpc.params[0];
        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);
        return rpc.makeResult(res);
    });
});
exports.RPCMethodMap.set('eth_blockNumber', function (rpc, host, timeout) {
    return __awaiter(this, void 0, void 0, function* () {
        const URL = host + '/blocks/best';
        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);
        return rpc.makeResult(!res ? null : res.number);
    });
});
exports.RPCMethodMap.set('eth_getBalance', function (rpc, host, timeout) {
    return __awaiter(this, void 0, void 0, function* () {
        const URL = host + '/accounts/' + rpc.params[0] + '?revision=' + utils.fromETHBlockNumber(rpc.params[1]);
        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);
        return rpc.makeResult(!res ? null : res.balance);
    });
});
exports.RPCMethodMap.set('eth_getEnergy', function (rpc, host, timeout) {
    return __awaiter(this, void 0, void 0, function* () {
        const URL = host + '/accounts/' + rpc.params[0] + '?revision=' + utils.fromETHBlockNumber(rpc.params[1]);
        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);
        return rpc.makeResult(!res ? null : res.energy);
    });
});
exports.RPCMethodMap.set('eth_getCode', function (rpc, host, timeout) {
    return __awaiter(this, void 0, void 0, function* () {
        const URL = host + '/accounts/' + rpc.params[0] + '/code?revision=' + utils.fromETHBlockNumber(rpc.params[1]);
        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);
        return rpc.makeResult(!res ? null : res.code);
    });
});
exports.RPCMethodMap.set('eth_getStorageAt', function (rpc, host, timeout) {
    return __awaiter(this, void 0, void 0, function* () {
        const URL = host + '/accounts/' + rpc.params[0] + '/storage/' + utils.leftPadToBytes32(rpc.params[1]) + '?revision=' + utils.fromETHBlockNumber(rpc.params[2]);
        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);
        return rpc.makeResult(!res ? null : res.value);
    });
});
exports.RPCMethodMap.set('eth_sendRawTransaction', function (rpc, host, timeout) {
    return __awaiter(this, void 0, void 0, function* () {
        const URL = host + '/transactions';
        const reqBody = {
            raw: rpc.params[0],
        };
        const res = yield simple_http_1.HTTP.post(URL, reqBody, timeout).then(HTTPPostProcessor);
        return rpc.makeResult(!res ? null : res.id);
    });
});
exports.RPCMethodMap.set('eth_getTransactionByHash', function (rpc, host, timeout) {
    return __awaiter(this, void 0, void 0, function* () {
        const URL = host + '/transactions/' + rpc.params[0];
        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);
        if (!res) {
            return rpc.makeResult(null);
        }
        res.blockNumber = res.meta.blockNumber;
        return rpc.makeResult(res);
    });
});
exports.RPCMethodMap.set('eth_getTransactionReceipt', function (rpc, host, timeout) {
    return __awaiter(this, void 0, void 0, function* () {
        const URL = host + '/transactions/' + rpc.params[0] + '/receipt';
        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);
        if (!res) {
            return rpc.makeResult(null);
        }
        res.blockNumber = res.meta.blockNumber;
        res.blockHash = res.meta.blockID;
        res.transactionHash = res.meta.txID;
        // For compatible with ethereum's receipt
        if (res.reverted) {
            res.status = '0x0';
        }
        else {
            res.status = '0x1';
        }
        if (res.outputs.length === 1) {
            res.contractAddress = res.outputs[0].contractAddress;
        }
        return rpc.makeResult(res);
    });
});
exports.RPCMethodMap.set('eth_call', function (rpc, host, timeout) {
    return __awaiter(this, void 0, void 0, function* () {
        let extraURI = '';
        if (rpc.params[0].to) {
            extraURI = '/' + rpc.params[0].to;
        }
        extraURI += '?revision=' + utils.fromETHBlockNumber(rpc.params[1]);
        const URL = host + '/accounts' + extraURI;
        const reqBody = {
            value: rpc.params[0].value || '',
            data: rpc.params[0].data || '0x',
            gasPrice: rpc.params[0].gasPrice || '',
        };
        if (rpc.params[0].gas) {
            if (typeof rpc.params[0].gas === 'number') {
                reqBody.gas = rpc.params[0].gas;
            }
            else {
                reqBody.gas = parseInt(utils.sanitizeHex(rpc.params[0].gas), 16);
            }
        }
        if (rpc.params[0].from) {
            reqBody.caller = rpc.params[0].from;
        }
        const res = yield simple_http_1.HTTP.post(URL, reqBody, timeout).then(HTTPPostProcessor);
        if (!res) {
            return rpc.makeResult(null);
        }
        else {
            if (res.reverted) {
                return rpc.makeResult(null);
            }
            else {
                return rpc.makeResult(res.data);
            }
        }
    });
});
exports.RPCMethodMap.set('eth_estimateGas', function (rpc, host, timeout) {
    return __awaiter(this, void 0, void 0, function* () {
        let extraURI = '';
        if (rpc.params[0].to) {
            extraURI = '/' + rpc.params[0].to;
        }
        extraURI += '?revision=' + utils.fromETHBlockNumber(rpc.params[1]);
        const URL = host + '/accounts' + extraURI;
        const reqBody = {
            value: rpc.params[0].value || '',
            data: rpc.params[0].data || '0x',
            gasPrice: rpc.params[0].gasPrice || '',
        };
        if (rpc.params[0].gas) {
            if (typeof rpc.params[0].gas === 'number') {
                reqBody.gas = rpc.params[0].gas;
            }
            else {
                reqBody.gas = parseInt(utils.sanitizeHex(rpc.params[0].gas), 16);
            }
        }
        if (rpc.params[0].from) {
            reqBody.caller = rpc.params[0].from;
        }
        const res = yield simple_http_1.HTTP.post(URL, reqBody, timeout).then(HTTPPostProcessor);
        if (!res) {
            return rpc.makeResult(null);
        }
        else {
            if (res.reverted) {
                return rpc.makeResult(null);
            }
            else {
                // ignore the overflow since block gas limit is uint64 and JavaScript's max number is 2^53
                const intrinsicGas = utils.calcIntrinsicGas(Object.assign(reqBody, { to: rpc.params[0].to }));
                if (res.gasUsed === 0 && (reqBody.data === '0x')) {
                    return rpc.makeResult(intrinsicGas);
                }
                else {
                    return rpc.makeResult(Math.floor(res.gasUsed * 1.2) + intrinsicGas); // increase vm gas with 20% for safe since it's estimated from current block state, final state for the transaction is not determined for now
                }
            }
        }
    });
});
exports.RPCMethodMap.set('eth_getLogs', function (rpc, host, timeout) {
    return __awaiter(this, void 0, void 0, function* () {
        let query = '';
        if (rpc.params[0].address) {
            query = '&address=' + rpc.params[0].address;
        }
        if (rpc.params[0].order && (rpc.params[0].order.toUpperCase() === 'ASC' || rpc.params[0].order.toUpperCase() === 'DESC')) {
            query += '&order=' + rpc.params[0].order.toUpperCase();
        }
        query = query.replace('&', '?');
        const URL = host + '/logs/events' + query;
        const reqBody = utils.formatLogQuery(rpc.params[0]);
        const res = yield simple_http_1.HTTP.post(URL, reqBody, timeout).then(HTTPPostProcessor);
        if (!res) {
            return rpc.makeResult(null);
        }
        for (const item of res) {
            item.blockNumber = item.meta.blockNumber;
            item.blockHash = item.meta.blockID;
            item.transactionHash = item.meta.txID;
        }
        return rpc.makeResult(res);
    });
});
exports.RPCMethodMap.set('eth_getBlockRef', function (rpc, host, timeout) {
    return __awaiter(this, void 0, void 0, function* () {
        const URL = host + '/blocks/best';
        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);
        if (!res || !res.id) {
            return rpc.makeResult(null);
        }
        return rpc.makeResult(res.id.substr(0, 18));
    });
});
exports.RPCMethodMap.set('eth_getChainTag', function (rpc, host, timeout) {
    return __awaiter(this, void 0, void 0, function* () {
        const URL = host + '/blocks/0';
        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);
        if (!res || !res.id || res.id.length !== 66) {
            return rpc.makeResult(null);
        }
        return rpc.makeResult('0x' + res.id.substr(64, 2));
    });
});
//# sourceMappingURL=data:application/json;base64,