/** encode/decode parameters of contract function call, event log, according to ABI JSON */
export declare namespace abi {
    /** for contract function */
    class Function {
        readonly definition: Function.Definition;
        /**
         * create a function object
         * @param definition abi definition of the function
         */
        constructor(definition: Function.Definition);
        /** compute function signature */
        readonly signature: string;
        /**
         * encode input parameters into call data
         * @param args arguments for the function
         */
        encode(...args: any[]): string;
        /**
         * decode output data
         * @param outputData output data to decode
         */
        decode(outputData: string): object;
    }
    namespace Function {
        type Type = 'function' | 'constructor' | 'fallback';
        type StateMutability = 'pure' | 'view' | 'constant' | 'payable' | 'nonpayable';
        interface Parameter {
            name: string;
            type: string;
        }
        interface Definition {
            type?: Type;
            name?: string;
            constant?: boolean;
            payable: boolean;
            stateMutability: StateMutability;
            inputs?: Parameter[];
            outputs?: Parameter[];
        }
    }
    /** for contract event */
    class Event {
        readonly definition: Event.Definition;
        /** for contract event */
        constructor(definition: Event.Definition);
        /** compute event signature */
        readonly signature: string;
        /**
         * encode an object of indexed keys into topics.
         * @param indexed an object contains indexed keys
         */
        encode(indexed: object): Array<string | null>;
        /**
         * decode event log
         * @param data data in event output
         * @param topics topics in event
         */
        decode(data: string, topics: string[]): object;
    }
    namespace Event {
        interface Parameter {
            name: string;
            type: string;
            indexed: boolean;
        }
        interface Definition {
            type: 'event';
            name: string;
            anonymous?: boolean;
            inputs: Parameter[];
        }
    }
}
