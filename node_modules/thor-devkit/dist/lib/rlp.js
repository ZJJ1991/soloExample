"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_js_1 = require("bignumber.js");
const rlp = require('rlp');
class RLP {
    constructor(profile) {
        this.profile = profile;
    }
    /**
     * encode data according to profile
     * @param data the structured data to be encoded
     */
    encode(data) {
        const packed = pack(data, this.profile, '');
        return rlp.encode(packed);
    }
    /**
     * decode buffer according to profile
     * @param buf rlp encoded data
     */
    decode(buf) {
        const packed = rlp.decode(buf);
        return unpack(packed, this.profile, '');
    }
}
exports.RLP = RLP;
(function (RLP) {
    /** base class of scalar kind */
    class ScalarKind {
        constructor() { }
    }
    RLP.ScalarKind = ScalarKind;
    /** a noop scalar kind */
    class RawKind extends ScalarKind {
        constructor() { super(); }
        encode(data, ctx) {
            return data;
        }
        decode(buf, ctx) {
            return buf;
        }
    }
    RLP.RawKind = RawKind;
    /** a scalar kind to presents number */
    class NumericKind extends ScalarKind {
        /**
         * create a numeric kind
         * @param maxBytes up limit of data in bytes
         */
        constructor(maxBytes) {
            super();
            this.maxBytes = maxBytes;
        }
        encode(data, ctx) {
            assert(typeof data === 'string' || typeof data === 'number', ctx, 'expected string or number');
            if (typeof data === 'string') {
                assert(isHexString(data), ctx, 'expected non-negative integer in hex string');
                assert(data.length > 2, ctx, 'expected valid hex string');
            }
            else {
                assert(Number.isSafeInteger(data) && data >= 0, ctx, 'expected non-negative safe integer');
            }
            const bn = new bignumber_js_1.BigNumber(data);
            if (bn.isZero()) {
                return Buffer.alloc(0);
            }
            let hex = bn.toString(16);
            if (hex.length % 2 !== 0) {
                hex = '0' + hex;
            }
            const buf = Buffer.from(hex, 'hex');
            assert(this.maxBytes ? buf.length <= this.maxBytes : true, ctx, `expected number in ${this.maxBytes} bytes`);
            return buf;
        }
        decode(buf, ctx) {
            assert(this.maxBytes ? buf.length <= this.maxBytes : true, ctx, `expected less than ${this.maxBytes} bytes`);
            if (buf.length === 0) {
                return 0;
            }
            assert(buf[0] !== 0, ctx, `expected canonical integer (no leading zero bytes)`);
            const bn = new bignumber_js_1.BigNumber(buf.toString('hex'), 16);
            const num = bn.toNumber();
            return Number.isSafeInteger(num) ? num : '0x' + bn.toString(16);
        }
    }
    RLP.NumericKind = NumericKind;
    /** a scalar kind to present fixed length blob */
    class BlobKind extends ScalarKind {
        /**
         * create blob kind
         * @param bytes size of blob in bytes
         */
        constructor(bytes) {
            super();
            this.bytes = bytes;
        }
        encode(data, ctx) {
            assert(isHexString(data), ctx, 'expected hex string');
            assert(data.length === this.bytes * 2 + 2, ctx, `expected hex string presents ${this.bytes} bytes`);
            return Buffer.from(data.slice(2), 'hex');
        }
        decode(buf, ctx) {
            assert(buf.length === this.bytes, ctx, `expected ${this.bytes} bytes`);
            return '0x' + buf.toString('hex');
        }
    }
    RLP.BlobKind = BlobKind;
    /** blob kind that can be null */
    class NullableBlobKind extends BlobKind {
        encode(data, ctx) {
            if (data) {
                return super.encode(data, ctx);
            }
            return Buffer.alloc(0);
        }
        decode(buf, ctx) {
            if (buf.length === 0) {
                return null;
            }
            return super.decode(buf, ctx);
        }
    }
    RLP.NullableBlobKind = NullableBlobKind;
    /** a blob kind that leading zero will be removed when encoded */
    class TrimmedBlobKind extends BlobKind {
        encode(data, ctx) {
            const buf = super.encode(data, ctx);
            const nzIndex = buf.findIndex(v => v !== 0);
            if (nzIndex >= 0) {
                return buf.slice(nzIndex);
            }
            return Buffer.alloc(0);
        }
        decode(buf, ctx) {
            assert(buf.length <= this.bytes, ctx, `expected less than ${this.bytes} bytes`);
            const zeros = '0'.repeat((this.bytes - buf.length) * 2);
            return '0x' + zeros + buf.toString('hex');
        }
    }
    RLP.TrimmedBlobKind = TrimmedBlobKind;
    /** a blob kind with variable length */
    class VariableBlobKind extends BlobKind {
        constructor(maxBytes) {
            if (maxBytes) {
                super(maxBytes);
            }
            else {
                super(Number.MAX_SAFE_INTEGER);
            }
        }
        encode(data, ctx) {
            assert(isHexString(data), ctx, 'expected hex string');
            assert(data.length % 2 === 0, ctx, 'expected even length hex');
            const buf = Buffer.from(data.slice(2), 'hex');
            assert(buf.length <= this.bytes, ctx, `expected less than ${this.bytes} bytes`);
            return buf;
        }
        decode(buf, ctx) {
            assert(buf.length <= this.bytes, ctx, `expected less than ${this.bytes} bytes`);
            return '0x' + buf.toString('hex');
        }
    }
    RLP.VariableBlobKind = VariableBlobKind;
})(RLP = exports.RLP || (exports.RLP = {}));
function pack(obj, profile, ctx) {
    ctx = ctx ? ctx + '.' + profile.name : profile.name;
    const kind = profile.kind;
    if (kind instanceof RLP.ScalarKind) {
        return kind.encode(obj, ctx);
    }
    if (Array.isArray(kind)) {
        return kind.map(k => pack(obj[k.name], k, ctx));
    }
    assert(Array.isArray(obj), ctx, 'expected array');
    const item = kind.item;
    return obj.map((part, i) => pack(part, { name: '#' + i, kind: item }, ctx));
}
function unpack(packed, profile, ctx) {
    ctx = ctx ? ctx + '.' + profile.name : profile.name;
    const kind = profile.kind;
    if (kind instanceof RLP.ScalarKind) {
        if (!(kind instanceof RLP.RawKind)) {
            assert(Buffer.isBuffer(packed), ctx, 'expected Buffer');
        }
        return kind.decode(packed, ctx);
    }
    if (Array.isArray(kind)) {
        assert(Array.isArray(packed), ctx, 'expected array');
        const parts = packed;
        assert(parts.length === kind.length, ctx, `expected ${kind.length} items, but got ${parts.length}`);
        return kind.reduce((o, p, i) => {
            o[p.name] = unpack(parts[i], p, ctx);
            return o;
        }, {});
    }
    assert(Array.isArray(packed), ctx, 'expected array');
    const item = kind.item;
    return packed.map((part, i) => unpack(part, { name: '#' + i, kind: item }, ctx));
}
function assert(cond, ctx, msg) {
    if (!cond) {
        throw new Error(`${ctx}: ${msg}`);
    }
}
function isHexString(str) {
    return /^0x[0-9a-f]*$/i.test(str);
}
//# sourceMappingURL=data:application/json;base64,