/// <reference types="node" />
export declare class RLP {
    readonly profile: RLP.Profile;
    constructor(profile: RLP.Profile);
    /**
     * encode data according to profile
     * @param data the structured data to be encoded
     */
    encode(data: any): Buffer;
    /**
     * decode buffer according to profile
     * @param buf rlp encoded data
     */
    decode(buf: Buffer): any;
}
export declare namespace RLP {
    /** base class of scalar kind */
    abstract class ScalarKind {
        protected constructor();
        abstract encode(data: any, ctx: string): Buffer;
        abstract decode(buf: Buffer, ctx: string): any;
    }
    /** a noop scalar kind */
    class RawKind extends ScalarKind {
        constructor();
        encode(data: any, ctx: string): any;
        decode(buf: any, ctx: string): any;
    }
    /** a scalar kind to presents number */
    class NumericKind extends ScalarKind {
        readonly maxBytes?: number | undefined;
        /**
         * create a numeric kind
         * @param maxBytes up limit of data in bytes
         */
        constructor(maxBytes?: number | undefined);
        encode(data: string | number, ctx: string): Buffer;
        decode(buf: Buffer, ctx: string): string | number;
    }
    /** a scalar kind to present fixed length blob */
    class BlobKind extends ScalarKind {
        readonly bytes: number;
        /**
         * create blob kind
         * @param bytes size of blob in bytes
         */
        constructor(bytes: number);
        encode(data: string, ctx: string): Buffer;
        decode(buf: Buffer, ctx: string): string;
    }
    /** blob kind that can be null */
    class NullableBlobKind extends BlobKind {
        encode(data: string | null, ctx: string): Buffer;
        decode(buf: Buffer, ctx: string): any;
    }
    /** a blob kind that leading zero will be removed when encoded */
    class TrimmedBlobKind extends BlobKind {
        encode(data: string, ctx: string): Buffer;
        decode(buf: Buffer, ctx: string): string;
    }
    /** a blob kind with variable length */
    class VariableBlobKind extends BlobKind {
        constructor(maxBytes?: number);
        encode(data: string, ctx: string): Buffer;
        decode(buf: Buffer, ctx: string): string;
    }
    /** a list of items in one kind */
    interface ArrayKind {
        item: Profile['kind'];
    }
    /** a list of items in each kinds */
    type StructKind = Profile[];
    /** presents a list item */
    interface Profile {
        name: string;
        kind: ScalarKind | ArrayKind | StructKind;
    }
}
