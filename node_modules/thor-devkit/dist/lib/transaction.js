"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("./crypto");
const rlp_1 = require("./rlp");
/** Transaction class defines VeChainThor's multi-clause transaction */
class Transaction {
    /** decode from Buffer to transaction */
    static decode(raw) {
        try {
            const body = unsignedTxRLP.decode(raw);
            return new Transaction(body);
        }
        catch (_a) {
            const body = txRLP.decode(raw);
            const sig = body.signature;
            delete body.signature;
            const tx = new Transaction(body);
            tx.signature = Buffer.from(sig.slice(2), 'hex');
            return tx;
        }
    }
    /**
     * construct a transaction object with given body
     * @param body body of tx
     */
    constructor(body) {
        this.body = Object.assign({}, body, { reserved: body.reserved || [] });
    }
    /**
     * returns transaction ID
     * null returned if something wrong (e.g. invalid signature)
     */
    get id() {
        if (!this.signature) {
            return null;
        }
        try {
            const signingHash = crypto_1.blake2b256(unsignedTxRLP.encode(this.body));
            const pubKey = crypto_1.secp256k1.recover(signingHash, this.signature);
            const signer = crypto_1.publicKeyToAddress(pubKey);
            return '0x' + crypto_1.blake2b256(signingHash, signer).toString('hex');
        }
        catch (_a) {
            return null;
        }
    }
    /** returns signer. null returned if no signature or not incorrectly signed */
    get signer() {
        if (!this.signature) {
            return null;
        }
        try {
            const signingHash = crypto_1.blake2b256(unsignedTxRLP.encode(this.body));
            const pubKey = crypto_1.secp256k1.recover(signingHash, this.signature);
            return '0x' + crypto_1.publicKeyToAddress(pubKey).toString('hex');
        }
        catch (_a) {
            return null;
        }
    }
    /** returns intrinsic gas it takes */
    get intrinsicGas() {
        return Transaction.intrinsicGas(this.body.clauses);
    }
    /** encode into Buffer */
    encode() {
        if (this.signature) {
            const sigHex = '0x' + this.signature.toString('hex');
            return txRLP.encode(Object.assign({}, this.body, { signature: sigHex }));
        }
        return unsignedTxRLP.encode(this.body);
    }
}
exports.Transaction = Transaction;
(function (Transaction) {
    /**
     * calculates intrinsic gas that a tx costs with the given clauses.
     * @param clauses
     */
    function intrinsicGas(clauses) {
        const txGas = 5000;
        const clauseGas = 16000;
        const clauseGasContractCreation = 48000;
        if (clauses.length === 0) {
            return txGas + clauseGas;
        }
        return clauses.reduce((sum, c) => {
            if (c.to) {
                sum += clauseGas;
            }
            else {
                sum += clauseGasContractCreation;
            }
            sum += dataGas(c.data);
            return sum;
        }, txGas);
    }
    Transaction.intrinsicGas = intrinsicGas;
    function dataGas(data) {
        const zgas = 4;
        const nzgas = 68;
        let sum = 0;
        for (let i = 2; i < data.length; i += 2) {
            if (data.substr(i, 2) === '00') {
                sum += zgas;
            }
            else {
                sum += nzgas;
            }
        }
        return sum;
    }
})(Transaction = exports.Transaction || (exports.Transaction = {}));
const unsignedTxRLP = new rlp_1.RLP({
    name: 'tx',
    kind: [
        { name: 'chainTag', kind: new rlp_1.RLP.NumericKind(1) },
        { name: 'blockRef', kind: new rlp_1.RLP.TrimmedBlobKind(8) },
        { name: 'expiration', kind: new rlp_1.RLP.NumericKind(4) },
        {
            name: 'clauses', kind: {
                item: [
                    { name: 'to', kind: new rlp_1.RLP.NullableBlobKind(20) },
                    { name: 'value', kind: new rlp_1.RLP.NumericKind(32) },
                    { name: 'data', kind: new rlp_1.RLP.VariableBlobKind() },
                ],
            },
        },
        { name: 'gasPriceCoef', kind: new rlp_1.RLP.NumericKind(1) },
        { name: 'gas', kind: new rlp_1.RLP.NumericKind(8) },
        { name: 'dependsOn', kind: new rlp_1.RLP.NullableBlobKind(32) },
        { name: 'nonce', kind: new rlp_1.RLP.NumericKind(8) },
        { name: 'reserved', kind: new rlp_1.RLP.RawKind() },
    ],
});
const txRLP = new rlp_1.RLP({
    name: 'tx',
    kind: [...unsignedTxRLP.profile.kind, { name: 'signature', kind: new rlp_1.RLP.VariableBlobKind() }],
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbGliL3RyYW5zYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscUNBQW9FO0FBQ3BFLCtCQUEyQjtBQUUzQix1RUFBdUU7QUFDdkU7SUFDSSx3Q0FBd0M7SUFDakMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFXO1FBQzVCLElBQUk7WUFDQSxNQUFNLElBQUksR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ3RDLE9BQU8sSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDL0I7UUFBQyxXQUFNO1lBQ0osTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUM5QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBbUIsQ0FBQTtZQUNwQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUE7WUFFckIsTUFBTSxFQUFFLEdBQUcsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDaEMsRUFBRSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUE7WUFDL0MsT0FBTyxFQUFFLENBQUE7U0FDWjtJQUNMLENBQUM7SUFPRDs7O09BR0c7SUFDSCxZQUFZLElBQXNCO1FBQzlCLElBQUksQ0FBQyxJQUFJLHFCQUFRLElBQUksSUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsSUFBSSxFQUFFLEdBQUUsQ0FBQTtJQUMxRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsSUFBSSxFQUFFO1FBQ0YsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDakIsT0FBTyxJQUFJLENBQUE7U0FDZDtRQUNELElBQUk7WUFDQSxNQUFNLFdBQVcsR0FBRyxtQkFBVSxDQUFDLGFBQWEsQ0FB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